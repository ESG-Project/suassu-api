// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: permission.sql

package sqlcgen

import (
	"context"
)

const createPermission = `-- name: CreatePermission :one
INSERT INTO "Permission" (id, "featureId", "roleId", "create", "read", "update", "delete")
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, "featureId", "roleId", "create", read, update, delete
`

type CreatePermissionParams struct {
	ID        string `json:"id"`
	FeatureId string `json:"featureId"`
	RoleId    string `json:"roleId"`
	Create    bool   `json:"create"`
	Read      bool   `json:"read"`
	Update    bool   `json:"update"`
	Delete    bool   `json:"delete"`
}

func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, createPermission,
		arg.ID,
		arg.FeatureId,
		arg.RoleId,
		arg.Create,
		arg.Read,
		arg.Update,
		arg.Delete,
	)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.FeatureId,
		&i.RoleId,
		&i.Create,
		&i.Read,
		&i.Update,
		&i.Delete,
	)
	return i, err
}

const deletePermission = `-- name: DeletePermission :exec
DELETE FROM "Permission"
WHERE id = $1
`

func (q *Queries) DeletePermission(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletePermission, id)
	return err
}

const listPermissionsByRole = `-- name: ListPermissionsByRole :many
SELECT id, "featureId", "roleId", "create", read, update, delete
FROM "Permission"
WHERE "roleId" = $1
`

func (q *Queries) ListPermissionsByRole(ctx context.Context, roleid string) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, listPermissionsByRole, roleid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.FeatureId,
			&i.RoleId,
			&i.Create,
			&i.Read,
			&i.Update,
			&i.Delete,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePermission = `-- name: UpdatePermission :one
UPDATE "Permission"
SET "create" = $2, "read" = $3, "update" = $4, "delete" = $5
WHERE id = $1
RETURNING id, "featureId", "roleId", "create", read, update, delete
`

type UpdatePermissionParams struct {
	ID     string `json:"id"`
	Create bool   `json:"create"`
	Read   bool   `json:"read"`
	Update bool   `json:"update"`
	Delete bool   `json:"delete"`
}

func (q *Queries) UpdatePermission(ctx context.Context, arg UpdatePermissionParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, updatePermission,
		arg.ID,
		arg.Create,
		arg.Read,
		arg.Update,
		arg.Delete,
	)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.FeatureId,
		&i.RoleId,
		&i.Create,
		&i.Read,
		&i.Update,
		&i.Delete,
	)
	return i, err
}
