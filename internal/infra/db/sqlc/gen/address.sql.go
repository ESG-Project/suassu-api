// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: address.sql

package sqlcgen

import (
	"context"
	"database/sql"
)

const createAddress = `-- name: CreateAddress :exec
INSERT INTO "Address" (
    "id",
    "zipCode",
    "state",
    "city",
    "neighborhood",
    "street",
    "num",
    "latitude",
    "longitude",
    "addInfo"
  )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
`

type CreateAddressParams struct {
	ID           string         `json:"id"`
	ZipCode      string         `json:"zipCode"`
	State        string         `json:"state"`
	City         string         `json:"city"`
	Neighborhood string         `json:"neighborhood"`
	Street       string         `json:"street"`
	Num          string         `json:"num"`
	Latitude     sql.NullString `json:"latitude"`
	Longitude    sql.NullString `json:"longitude"`
	AddInfo      sql.NullString `json:"addInfo"`
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) error {
	_, err := q.db.ExecContext(ctx, createAddress,
		arg.ID,
		arg.ZipCode,
		arg.State,
		arg.City,
		arg.Neighborhood,
		arg.Street,
		arg.Num,
		arg.Latitude,
		arg.Longitude,
		arg.AddInfo,
	)
	return err
}

const findAddressByDetails = `-- name: FindAddressByDetails :one
SELECT id, "zipCode", state, city, neighborhood, street, num, latitude, longitude, "addInfo"
FROM "Address"
WHERE "zipCode" = $1
  AND state = $2
  AND city = $3
  AND neighborhood = $4
  AND street = $5
  AND num = $6
  AND latitude = $7
  AND longitude = $8
  AND "addInfo" = $9
LIMIT 1
`

type FindAddressByDetailsParams struct {
	ZipCode      string         `json:"zipCode"`
	State        string         `json:"state"`
	City         string         `json:"city"`
	Neighborhood string         `json:"neighborhood"`
	Street       string         `json:"street"`
	Num          string         `json:"num"`
	Latitude     sql.NullString `json:"latitude"`
	Longitude    sql.NullString `json:"longitude"`
	AddInfo      sql.NullString `json:"addInfo"`
}

func (q *Queries) FindAddressByDetails(ctx context.Context, arg FindAddressByDetailsParams) (Address, error) {
	row := q.db.QueryRowContext(ctx, findAddressByDetails,
		arg.ZipCode,
		arg.State,
		arg.City,
		arg.Neighborhood,
		arg.Street,
		arg.Num,
		arg.Latitude,
		arg.Longitude,
		arg.AddInfo,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.ZipCode,
		&i.State,
		&i.City,
		&i.Neighborhood,
		&i.Street,
		&i.Num,
		&i.Latitude,
		&i.Longitude,
		&i.AddInfo,
	)
	return i, err
}

const getAddressByID = `-- name: GetAddressByID :one
SELECT id, "zipCode", state, city, neighborhood, street, num, latitude, longitude, "addInfo"
FROM "Address"
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAddressByID(ctx context.Context, id string) (Address, error) {
	row := q.db.QueryRowContext(ctx, getAddressByID, id)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.ZipCode,
		&i.State,
		&i.City,
		&i.Neighborhood,
		&i.Street,
		&i.Num,
		&i.Latitude,
		&i.Longitude,
		&i.AddInfo,
	)
	return i, err
}

const listAddresses = `-- name: ListAddresses :many
SELECT id, "zipCode", state, city, neighborhood, street, num, latitude, longitude, "addInfo"
FROM "Address"
`

func (q *Queries) ListAddresses(ctx context.Context) ([]Address, error) {
	rows, err := q.db.QueryContext(ctx, listAddresses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Address
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.ZipCode,
			&i.State,
			&i.City,
			&i.Neighborhood,
			&i.Street,
			&i.Num,
			&i.Latitude,
			&i.Longitude,
			&i.AddInfo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAddress = `-- name: UpdateAddress :exec
UPDATE "Address"
SET
  "zipCode" = $2,
  "state" = $3,
  "city" = $4,
  "neighborhood" = $5,
  "street" = $6,
  "num" = $7,
  "latitude" = $8,
  "longitude" = $9,
  "addInfo" = $10
WHERE id = $1
`

type UpdateAddressParams struct {
	ID           string         `json:"id"`
	ZipCode      string         `json:"zipCode"`
	State        string         `json:"state"`
	City         string         `json:"city"`
	Neighborhood string         `json:"neighborhood"`
	Street       string         `json:"street"`
	Num          string         `json:"num"`
	Latitude     sql.NullString `json:"latitude"`
	Longitude    sql.NullString `json:"longitude"`
	AddInfo      sql.NullString `json:"addInfo"`
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) error {
	_, err := q.db.ExecContext(ctx, updateAddress,
		arg.ID,
		arg.ZipCode,
		arg.State,
		arg.City,
		arg.Neighborhood,
		arg.Street,
		arg.Num,
		arg.Latitude,
		arg.Longitude,
		arg.AddInfo,
	)
	return err
}
