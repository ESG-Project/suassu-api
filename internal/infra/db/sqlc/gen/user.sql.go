// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package sqlcgen

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO "User" (
    "id",
    "name",
    "email",
    "password",
    "document",
    "phone",
    "addressId",
    "roleId",
    "enterpriseId"
  )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type CreateUserParams struct {
	ID           string         `json:"id"`
	Name         string         `json:"name"`
	Email        string         `json:"email"`
	Password     string         `json:"password"`
	Document     string         `json:"document"`
	Phone        sql.NullString `json:"phone"`
	AddressId    sql.NullString `json:"addressId"`
	RoleId       sql.NullString `json:"roleId"`
	EnterpriseId string         `json:"enterpriseId"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Document,
		arg.Phone,
		arg.AddressId,
		arg.RoleId,
		arg.EnterpriseId,
	)
	return err
}

const findUserByEmailForAuth = `-- name: FindUserByEmailForAuth :one
SELECT id,
  name,
  email,
  password AS password_hash,
  document,
  phone,
  "addressId" AS address_id,
  "roleId" AS role_id,
  "enterpriseId" AS enterprise_id
FROM "User"
WHERE email = $1
LIMIT 1
`

type FindUserByEmailForAuthRow struct {
	ID           string         `json:"id"`
	Name         string         `json:"name"`
	Email        string         `json:"email"`
	PasswordHash string         `json:"password_hash"`
	Document     string         `json:"document"`
	Phone        sql.NullString `json:"phone"`
	AddressID    sql.NullString `json:"address_id"`
	RoleID       sql.NullString `json:"role_id"`
	EnterpriseID string         `json:"enterprise_id"`
}

func (q *Queries) FindUserByEmailForAuth(ctx context.Context, email string) (FindUserByEmailForAuthRow, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmailForAuth, email)
	var i FindUserByEmailForAuthRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Document,
		&i.Phone,
		&i.AddressID,
		&i.RoleID,
		&i.EnterpriseID,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT u.id,
  u.name,
  u.email,
  u.password AS password_hash,
  u.document,
  u.phone,
  u."roleId" AS role_id,
  u."enterpriseId" AS enterprise_id,
  u."addressId" AS address_id,
  a."zipCode" AS zip_code,
  a.state,
  a.city,
  a.neighborhood,
  a.street,
  a.num,
  a.latitude,
  a.longitude,
  a."addInfo" AS add_info
FROM "User" u
  LEFT JOIN "Address" a ON u."addressId" = a.id
WHERE u."enterpriseId" = $1
  AND u.id = $2
LIMIT 1
`

type GetUserByIDParams struct {
	EnterpriseId string `json:"enterpriseId"`
	ID           string `json:"id"`
}

type GetUserByIDRow struct {
	ID           string         `json:"id"`
	Name         string         `json:"name"`
	Email        string         `json:"email"`
	PasswordHash string         `json:"password_hash"`
	Document     string         `json:"document"`
	Phone        sql.NullString `json:"phone"`
	RoleID       sql.NullString `json:"role_id"`
	EnterpriseID string         `json:"enterprise_id"`
	AddressID    sql.NullString `json:"address_id"`
	ZipCode      sql.NullString `json:"zip_code"`
	State        sql.NullString `json:"state"`
	City         sql.NullString `json:"city"`
	Neighborhood sql.NullString `json:"neighborhood"`
	Street       sql.NullString `json:"street"`
	Num          sql.NullString `json:"num"`
	Latitude     sql.NullString `json:"latitude"`
	Longitude    sql.NullString `json:"longitude"`
	AddInfo      sql.NullString `json:"add_info"`
}

func (q *Queries) GetUserByID(ctx context.Context, arg GetUserByIDParams) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, arg.EnterpriseId, arg.ID)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Document,
		&i.Phone,
		&i.RoleID,
		&i.EnterpriseID,
		&i.AddressID,
		&i.ZipCode,
		&i.State,
		&i.City,
		&i.Neighborhood,
		&i.Street,
		&i.Num,
		&i.Latitude,
		&i.Longitude,
		&i.AddInfo,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT u.id,
  u.name,
  u.email,
  u.password AS password_hash,
  u.document,
  u.phone,
  u."addressId" AS address_id,
  u."roleId" AS role_id,
  u."enterpriseId" AS enterprise_id,
  a."zipCode" AS zip_code,
  a.state,
  a.city,
  a.neighborhood,
  a.street,
  a.num,
  a.latitude,
  a.longitude,
  a."addInfo" AS add_info
FROM "User" u
  LEFT JOIN "Address" a ON u."addressId" = a.id
WHERE "enterpriseId" = $1
  AND (
    u.email > $3
    OR (
      u.email = $3
      AND u.id > $4
    )
  )
ORDER BY u.email ASC,
  u.id ASC
LIMIT $2
`

type ListUsersParams struct {
	EnterpriseId string `json:"enterpriseId"`
	Limit        int32  `json:"limit"`
	Email        string `json:"email"`
	ID           string `json:"id"`
}

type ListUsersRow struct {
	ID           string         `json:"id"`
	Name         string         `json:"name"`
	Email        string         `json:"email"`
	PasswordHash string         `json:"password_hash"`
	Document     string         `json:"document"`
	Phone        sql.NullString `json:"phone"`
	AddressID    sql.NullString `json:"address_id"`
	RoleID       sql.NullString `json:"role_id"`
	EnterpriseID string         `json:"enterprise_id"`
	ZipCode      sql.NullString `json:"zip_code"`
	State        sql.NullString `json:"state"`
	City         sql.NullString `json:"city"`
	Neighborhood sql.NullString `json:"neighborhood"`
	Street       sql.NullString `json:"street"`
	Num          sql.NullString `json:"num"`
	Latitude     sql.NullString `json:"latitude"`
	Longitude    sql.NullString `json:"longitude"`
	AddInfo      sql.NullString `json:"add_info"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers,
		arg.EnterpriseId,
		arg.Limit,
		arg.Email,
		arg.ID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.PasswordHash,
			&i.Document,
			&i.Phone,
			&i.AddressID,
			&i.RoleID,
			&i.EnterpriseID,
			&i.ZipCode,
			&i.State,
			&i.City,
			&i.Neighborhood,
			&i.Street,
			&i.Num,
			&i.Latitude,
			&i.Longitude,
			&i.AddInfo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
