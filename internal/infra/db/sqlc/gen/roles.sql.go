// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: roles.sql

package sqlcgen

import (
	"context"
)

const createRole = `-- name: CreateRole :one
INSERT INTO "Role" (id, title, "enterpriseId")
VALUES ($1, $2, $3)
RETURNING id, title, "enterpriseId"
`

type CreateRoleParams struct {
	ID           string `json:"id"`
	Title        string `json:"title"`
	EnterpriseId string `json:"enterpriseId"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole, arg.ID, arg.Title, arg.EnterpriseId)
	var i Role
	err := row.Scan(&i.ID, &i.Title, &i.EnterpriseId)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM "Role"
WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteRole, id)
	return err
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT r."id" as role_id,
  r."title" as role_title,
  r."enterpriseId" as enterprise_id,
  COALESCE(
    json_agg(
      json_build_object(
        'id',
        p."id",
        'feature_id',
        p."featureId",
        'feature_name',
        f."name",
        'create',
        p."create",
        'read',
        p."read",
        'update',
        p."update",
        'delete',
        p."delete"
      )
      ORDER BY f."name"
    ) FILTER (
      WHERE p."id" IS NOT NULL
    ),
    '[]'::json
  ) as permissions
FROM "Role" r
  LEFT JOIN "Permission" p ON r."id" = p."roleId"
  LEFT JOIN "Feature" f ON p."featureId" = f."id"
WHERE r."id" = $1
GROUP BY r."id",
  r."title",
  r."enterpriseId"
`

type GetRoleByIDRow struct {
	RoleID       string      `json:"role_id"`
	RoleTitle    string      `json:"role_title"`
	EnterpriseID string      `json:"enterprise_id"`
	Permissions  interface{} `json:"permissions"`
}

func (q *Queries) GetRoleByID(ctx context.Context, id string) (GetRoleByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getRoleByID, id)
	var i GetRoleByIDRow
	err := row.Scan(
		&i.RoleID,
		&i.RoleTitle,
		&i.EnterpriseID,
		&i.Permissions,
	)
	return i, err
}

const listRolesByEnterprise = `-- name: ListRolesByEnterprise :many
SELECT "id",
  "title",
  "enterpriseId" as enterprise_id
FROM "Role"
WHERE "enterpriseId" = $1
`

type ListRolesByEnterpriseRow struct {
	ID           string `json:"id"`
	Title        string `json:"title"`
	EnterpriseID string `json:"enterprise_id"`
}

func (q *Queries) ListRolesByEnterprise(ctx context.Context, enterpriseid string) ([]ListRolesByEnterpriseRow, error) {
	rows, err := q.db.QueryContext(ctx, listRolesByEnterprise, enterpriseid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRolesByEnterpriseRow
	for rows.Next() {
		var i ListRolesByEnterpriseRow
		if err := rows.Scan(&i.ID, &i.Title, &i.EnterpriseID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :one
UPDATE "Role"
SET title = $2
WHERE id = $1
RETURNING id, title, "enterpriseId"
`

type UpdateRoleParams struct {
	ID    string `json:"id"`
	Title string `json:"title"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, updateRole, arg.ID, arg.Title)
	var i Role
	err := row.Scan(&i.ID, &i.Title, &i.EnterpriseId)
	return i, err
}
