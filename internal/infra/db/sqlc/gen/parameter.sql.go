// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: parameter.sql

package sqlcgen

import (
	"context"
	"database/sql"
)

const createParameter = `-- name: CreateParameter :exec
INSERT INTO "Parameter" (
    "id",
    "title",
    "value",
    "enterpriseId",
    "isDefault"
  )
VALUES ($1, $2, $3, $4, $5)
`

type CreateParameterParams struct {
	ID           string         `json:"id"`
	Title        string         `json:"title"`
	Value        sql.NullString `json:"value"`
	EnterpriseId string         `json:"enterpriseId"`
	IsDefault    bool           `json:"isDefault"`
}

func (q *Queries) CreateParameter(ctx context.Context, arg CreateParameterParams) error {
	_, err := q.db.ExecContext(ctx, createParameter,
		arg.ID,
		arg.Title,
		arg.Value,
		arg.EnterpriseId,
		arg.IsDefault,
	)
	return err
}

const deleteParameter = `-- name: DeleteParameter :exec
DELETE FROM "Parameter"
WHERE id = $1
  AND "enterpriseId" = $2
`

type DeleteParameterParams struct {
	ID           string `json:"id"`
	EnterpriseId string `json:"enterpriseId"`
}

func (q *Queries) DeleteParameter(ctx context.Context, arg DeleteParameterParams) error {
	_, err := q.db.ExecContext(ctx, deleteParameter, arg.ID, arg.EnterpriseId)
	return err
}

const getParameterByID = `-- name: GetParameterByID :one
SELECT id,
  title,
  value,
  "enterpriseId",
  "isDefault"
FROM "Parameter"
WHERE id = $1
  AND "enterpriseId" = $2
LIMIT 1
`

type GetParameterByIDParams struct {
	ID           string `json:"id"`
	EnterpriseId string `json:"enterpriseId"`
}

func (q *Queries) GetParameterByID(ctx context.Context, arg GetParameterByIDParams) (Parameter, error) {
	row := q.db.QueryRowContext(ctx, getParameterByID, arg.ID, arg.EnterpriseId)
	var i Parameter
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Value,
		&i.EnterpriseId,
		&i.IsDefault,
	)
	return i, err
}

const listParametersByEnterprise = `-- name: ListParametersByEnterprise :many
SELECT id,
  title,
  value,
  "enterpriseId",
  "isDefault"
FROM "Parameter"
WHERE "enterpriseId" = $1
ORDER BY title
`

func (q *Queries) ListParametersByEnterprise(ctx context.Context, enterpriseid string) ([]Parameter, error) {
	rows, err := q.db.QueryContext(ctx, listParametersByEnterprise, enterpriseid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Parameter
	for rows.Next() {
		var i Parameter
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Value,
			&i.EnterpriseId,
			&i.IsDefault,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateParameter = `-- name: UpdateParameter :exec
UPDATE "Parameter"
SET "title" = $2,
  "value" = $3,
  "isDefault" = $4
WHERE id = $1
  AND "enterpriseId" = $5
`

type UpdateParameterParams struct {
	ID           string         `json:"id"`
	Title        string         `json:"title"`
	Value        sql.NullString `json:"value"`
	IsDefault    bool           `json:"isDefault"`
	EnterpriseId string         `json:"enterpriseId"`
}

func (q *Queries) UpdateParameter(ctx context.Context, arg UpdateParameterParams) error {
	_, err := q.db.ExecContext(ctx, updateParameter,
		arg.ID,
		arg.Title,
		arg.Value,
		arg.IsDefault,
		arg.EnterpriseId,
	)
	return err
}
