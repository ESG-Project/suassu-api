// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: product.sql

package sqlcgen

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :exec
INSERT INTO "Product" (
    "id",
    "name",
    "suggestedValue",
    "enterpriseId",
    "parameterId",
    "deliverable",
    "typeProductId",
    "isDefault"
  )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type CreateProductParams struct {
	ID             string         `json:"id"`
	Name           string         `json:"name"`
	SuggestedValue sql.NullString `json:"suggestedValue"`
	EnterpriseId   string         `json:"enterpriseId"`
	ParameterId    sql.NullString `json:"parameterId"`
	Deliverable    bool           `json:"deliverable"`
	TypeProductId  sql.NullString `json:"typeProductId"`
	IsDefault      bool           `json:"isDefault"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) error {
	_, err := q.db.ExecContext(ctx, createProduct,
		arg.ID,
		arg.Name,
		arg.SuggestedValue,
		arg.EnterpriseId,
		arg.ParameterId,
		arg.Deliverable,
		arg.TypeProductId,
		arg.IsDefault,
	)
	return err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM "Product"
WHERE id = $1
  AND "enterpriseId" = $2
`

type DeleteProductParams struct {
	ID           string `json:"id"`
	EnterpriseId string `json:"enterpriseId"`
}

func (q *Queries) DeleteProduct(ctx context.Context, arg DeleteProductParams) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, arg.ID, arg.EnterpriseId)
	return err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id,
  name,
  "suggestedValue",
  "enterpriseId",
  "parameterId",
  deliverable,
  "typeProductId",
  "isDefault"
FROM "Product"
WHERE id = $1
  AND "enterpriseId" = $2
LIMIT 1
`

type GetProductByIDParams struct {
	ID           string `json:"id"`
	EnterpriseId string `json:"enterpriseId"`
}

func (q *Queries) GetProductByID(ctx context.Context, arg GetProductByIDParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, arg.ID, arg.EnterpriseId)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SuggestedValue,
		&i.EnterpriseId,
		&i.ParameterId,
		&i.Deliverable,
		&i.TypeProductId,
		&i.IsDefault,
	)
	return i, err
}

const listProductsByEnterprise = `-- name: ListProductsByEnterprise :many
SELECT id,
  name,
  "suggestedValue",
  "enterpriseId",
  "parameterId",
  deliverable,
  "typeProductId",
  "isDefault"
FROM "Product"
WHERE "enterpriseId" = $1
ORDER BY name
`

func (q *Queries) ListProductsByEnterprise(ctx context.Context, enterpriseid string) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProductsByEnterprise, enterpriseid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SuggestedValue,
			&i.EnterpriseId,
			&i.ParameterId,
			&i.Deliverable,
			&i.TypeProductId,
			&i.IsDefault,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE "Product"
SET "name" = $2,
  "suggestedValue" = $3,
  "parameterId" = $4,
  "deliverable" = $5,
  "typeProductId" = $6,
  "isDefault" = $7
WHERE id = $1
  AND "enterpriseId" = $8
`

type UpdateProductParams struct {
	ID             string         `json:"id"`
	Name           string         `json:"name"`
	SuggestedValue sql.NullString `json:"suggestedValue"`
	ParameterId    sql.NullString `json:"parameterId"`
	Deliverable    bool           `json:"deliverable"`
	TypeProductId  sql.NullString `json:"typeProductId"`
	IsDefault      bool           `json:"isDefault"`
	EnterpriseId   string         `json:"enterpriseId"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.ExecContext(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.SuggestedValue,
		arg.ParameterId,
		arg.Deliverable,
		arg.TypeProductId,
		arg.IsDefault,
		arg.EnterpriseId,
	)
	return err
}
